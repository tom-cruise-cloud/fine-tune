from datasets import load_dataset
from trl import SFTTrainer
from datasets import Dataset
from transformers import AutoTokenizer
from peft import LoraConfig, get_peft_model
from transformers import AutoModelForCausalLM, TrainingArguments, Trainer
import os

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"

data = [
    {"instruction":"2", "response":"version"},
    {"instruction":"123456789010", "response":"account-id"},
    {"instruction":"OK", "response":"log-status"},
    {"instruction":"2 123456789010 eni-1235b8ca123456789 203.0.113.12 172.31.16.139 0 0 1 4 336 1432917027 1432917142 ACCEPT OK", "response":"version vpc-id subnet-id instance-id interface-id account-id type srcaddr dstaddr srcport dstport pkt-srcaddr pkt-dstaddr protocol bytes packets start end action tcp-flags log-status"},
    {"instruction":"3 eni-33333333333333333 123456789010 vpc-abcdefab012345678 subnet-22222222bbbbbbbbb i-01234567890123456 10.20.33.164 10.40.2.236 39812 80 6 3 IPv4 10.20.33.164 10.40.2.236 ACCEPT OK", "response":"version interface-id account-id vpc-id subnet-id instance-id srcaddr dstaddr srcport dstport protocol tcp-flags type pkt-srcaddr pkt-dstaddr action log-status"},
    {"instruction":"5 52.95.128.179 10.0.0.71 80 34210 6 1616729292 1616729349 IPv4 14 15044 123456789012 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-0c50d5961bcb2d47b eni-1235b8ca123456789 ap-southeast-2 apse2-az3 - - ACCEPT 19 52.95.128.179 10.0.0.71 S3 - - ingress OK", "response":"version srcaddr dstaddr srcport dstport protocol start end type packets bytes account-id vpc-id subnet-id instance-id interface-id region az-id sublocation-type sublocation-id action tcp-flags pkt-srcaddr pkt-dstaddr pkt-src-aws-service pkt-dst-aws-service traffic-path flow-direction log-status"},
    {"instruction":"2, 123456789012, eni-0abcdef1234567890, 10.0.0.10, 172.31.22.145, 54321, 80, 6, 10, 1200, 1678886400, 1678886460, ACCEPT, OK", "response":"version, account-id, interface-id, srcaddr, dstaddr, srcport, dstport, protocol, packets, bytes, start, end, action. log-status"},
    {"instruction":"2", "response":"The VPC Flow Logs version."},
    {"instruction":"2", "response":"The VPC Flow Logs version."},
    {"instruction":"123456789010", "response":"The AWS account ID."},
    {"instruction":"eni-1234567890abcdef0", "response":"The ID of the network interface."},
    {"instruction":"172.31.16.139", "response":"The source IP address, for example, your EC2 instance's private IP."},
    {"instruction":"203.0.113.12", "response":"The destination IP address, for example, your home computer's public IP."},
    {"instruction":"22", "response":"The source port the port on the EC2 instance."},
    {"instruction":"49152", "response":"The destination port a random high port on your computer."},
    {"instruction":"6", "response":"The IANA protocol number for TCP."},
    {"instruction":"20", "response":"The number of packets transferred."},
    {"instruction":"4249", "response":"The number of bytes transferred."},
    {"instruction":"1418530010", "response":"The start time of the flow in Unix seconds."},
    {"instruction":"1418530070", "response":"The end time of the flow in Unix seconds."},
    {"instruction":"ACCEPT", "response":"The action taken by the security group or network ACL, in this case, the traffic was permitted."},
    {"instruction":"OK", "response":"The logging status."},
    {"instruction":"version", "response":"The version of the flow log record format (e.g., 2)."},
    {"instruction":"account-id", "response":"The AWS account ID where the VPC is located (e.g., 123456789012)."},
    {"instruction":"interface-id", "response":"The ID of the network interface for which the traffic is logged (e.g., eni-0abcdef1234567890)."},
    {"instruction":"srcaddr", "response":"The source IP address of the traffic (e.g., 10.0.0.10)."},
    {"instruction":"dstaddr", "response":"The destination IP address of the traffic (e.g., 172.31.22.145)."},
    {"instruction":"srcport", "response":"The source port of the traffic (e.g., 54321)."},
    {"instruction":"dstport", "response":"The destination port of the traffic (e.g., 80)."},
    {"instruction":"protocol", "response":"The IP protocol number (e.g., 6 for TCP)."},
    {"instruction":"packets", "response":"The number of packets transferred during the aggregation interval (e.g., 10)."},
    {"instruction":"bytes", "response":"The number of bytes transferred during the aggregation interval (e.g., 1200)."},
    {"instruction":"start", "response":"The start time of the aggregation interval in Unix epoch seconds (e.g., 1678886400)."},
    {"instruction":"end", "response":"The end time of the aggregation interval in Unix epoch seconds (e.g., 1678886460)."},
    {"instruction":"action", "response":"The action taken on the traffic (ACCEPT or REJECT). In this case, ACCEPT indicates the traffic was allowed."},
    {"instruction":"log-status", "response":"The status of the flow log record (OK, NODATA, or SKIPDATA). OK indicates the data was successfully logged."},
    {"instruction": "version", "response": "The VPC Flow Logs version. If you use the default format, the version is , If you use a custom format, the version is the highest version among the specified fields.  Parquet data type: INT"},
    {"instruction": "account-id", "response": "The AWS account ID of the owner of the source network interface for which traffic is recorded. If the network interface is created by an AWS service, for example when creating a VPC endpoint or Network Load Balancer, the record might display unknown for this field. Parquet data type: STRING"},
    {"instruction": "interface-id", "response": "The ID of the network interface for which the traffic is recorded. Parquet data type: STRING"},
    {"instruction": "srcaddr", "response": "For incoming traffic, this is the IP address of the source of traffic. For outgoing traffic, this is the private IPv, address or the IPv, address of the network interface sending the traffic. See also pkt-srcaddr. Parquet data type: STRING"},
    {"instruction": "dstaddr", "response": "The destination address for outgoing traffic, or the IPv, or IPv, address of the network interface for incoming traffic on the network interface. The IPv, address of the network interface is always its private IPv, address. See also pkt-dstaddr. Parquet data type: STRING"},
    {"instruction": "srcport", "response": "The source port of the traffic. Parquet data type: INT"},
    {"instruction": "dstport", "response": "The destination port of the traffic. Parquet data type: INT"},
    {"instruction": "protocol", "response": "The IANA protocol number of the traffic. For more information, see Assigned Internet Protocol Numbers. Parquet data type: INT"},
    {"instruction": "packets", "response": "The number of packets transferred during the flow. Parquet data type: INT"},
    {"instruction": "bytes", "response": "The number of bytes transferred during the flow. Parquet data type: INT"},
    {"instruction": "start", "response": "The time, in Unix seconds, when the first packet of the flow was received within the aggregation interval. This might be up to ,0 seconds after the packet was transmitted or received on the network interface. Parquet data type: INT"},
    {"instruction": "end", "response": "The time, in Unix seconds, when the last packet of the flow was received within the aggregation interval. This might be up to ,0 seconds after the packet was transmitted or received on the network interface. Parquet data type: INT"},
    {"instruction": "action", "response": "The action that is associated with the traffic: ACCEPT — The traffic was accepted. REJECT — The traffic was rejected. For example, the traffic was not allowed by the security groups or network ACLs, or packets arrived after the connection was closed. Parquet data type: STRING"},
    {"instruction": "log-status", "response": "The logging status of the flow log: OK  Data is logging normally to the chosen destinations. NODATA  There was no network traffic to or from the network interface during the aggregation interval. SKIPDATA  Some flow log records were skipped during the aggregation interval. This might be because of an internal capacity constraint, or an internal error. Some flow log records may be skipped during the aggregation interval (see log-status in Available fields). This may be caused by an internal AWS capacity constraint or internal error. If you are using AWS Cost Explorer to view VPC flow log charges and some flow logs are skipped during the flow log aggregation interval, the number of flow logs reported in AWS Cost Explorer will be higher than the number of flow logs published by Amazon VPC. Parquet data type: STRING"},
    {"instruction": "vpc-id", "response": "The ID of the VPC that contains the network interface for which the traffic is recorded. Parquet data type: STRING"},
    {"instruction": "subnet-id", "response": "The ID of the subnet that contains the network interface for which the traffic is recorded. Parquet data type: STRING"},
    {"instruction": "instance-id", "response": "The ID of the instance that's associated with network interface for which the traffic is recorded, if the instance is owned by you. Returns a '-' symbol for a requester-managed network interface; for example, the network interface for a NAT gateway. Parquet data type: STRING"},
    {"instruction": "tcp-flags", "response": "The bitmask value for the following TCP flags FIN SYN RST SYN-ACK Parquet data type: STRING"},
    {"instruction": "TCP-flag-value", "response": "If no supported flags are recorded, the TCP flag value is 0. For example, since tcp-flags does not support logging ACK or PSH flags, records for traffic with these unsupported flags will result in tcp-flags value 0. If, however, an unsupported flag is accompanied by a supported flag, we will report the value of the supported flag. For example, if ACK is a part of SYN-ACK, it reports 1,. And if there is a record like SYN+ECE, since SYN is a supported flag and ECE is not, the TCP flag value is ,. If for some reason the flag combination is invalid and the value cannot be calculated, the value is '-'. If no flags are sent, the TCP flag value is 0. TCP flags can be OR-ed during the aggregation interval. For short connections, the flags might be set on the same line in the flow log record, for example, 19 for SYN-ACK and FIN, and , for SYN and FIN. For an example, see TCP flag sequence. For general information about TCP flags (such as the meaning of flags like FIN, SYN, and ACK), see TCP segment structure on Wikipedia. Parquet data type: INT"},
    {"instruction": "type", "response": "The type of traffic. The possible values are: IPv, | IPv, | EFA. For more information, see Elastic Fabric Adapter. Parquet data type: STRING"},
    {"instruction": "pkt-srcaddr", "response": "The packet-level (original) source IP address of the traffic. Use this field with the srcaddr field to distinguish between the IP address of an intermediate layer through which traffic flows, and the original source IP address of the traffic. For example, when traffic flows through a network interface for a NAT gateway, or where the IP address of a pod in Amazon EKS is different from the IP address of the network interface of the instance node on which the pod is running (for communication within a VPC). Parquet data type: STRING"},
    {"instruction": "pkt-dstaddr", "response": "The packet-level (original) destination IP address for the traffic. Use this field with the dstaddr field to distinguish between the IP address of an intermediate layer through which traffic flows, and the final destination IP address of the traffic. For example, when traffic flows through a network interface for a NAT gateway, or where the IP address of a pod in Amazon EKS is different from the IP address of the network interface of the instance node on which the pod is running (for communication within a VPC). Parquet data type: STRING"},
    {"instruction": "region", "response": "The Region that contains the network interface for which traffic is recorded. Parquet data type: STRING"},
    {"instruction": "az-id", "response": "The ID of the Availability Zone that contains the network interface for which traffic is recorded. If the traffic is from a sublocation, the record displays a '-' symbol for this field. Parquet data type: STRING"},
    {"instruction": "sublocation-type", "response": "The type of sublocation that's returned in the sublocation-id field. The possible values are: wavelength | outpost | localzone. If the traffic is not from a sublocation, the record displays a '-' symbol for this field. Parquet data type: STRING"},
    {"instruction": "sublocation-id", "response": "The ID of the sublocation that contains the network interface for which traffic is recorded. If the traffic is not from a sublocation, the record displays a '-' symbol for this field. Parquet data type: STRING"},
    {"instruction": "pkt-src-aws-service", "response": "The name of the subset of IP address ranges for the pkt-srcaddr field, if the source IP address is for an AWS service. If the source IP address belongs to an overlapped range, pkt-src-aws-service shows only one of the AWS service codes. The possible values are: AMAZON | AMAZON_APPFLOW | AMAZON_CONNECT | API_GATEWAY | AURORA_DSQL | CHIME_MEETINGS | CHIME_VOICECONNECTOR | CLOUD9 | CLOUDFRONT | CLOUDFRONT_ORIGIN_FACING | CODEBUILD | DYNAMODB | EBS | EC, | EC,_INSTANCE_CONNECT | GLOBALACCELERATOR | IVS_LOW_LATENCY | IVS_REALTIME | KINESIS_VIDEO_STREAMS | MEDIA_PACKAGE_V, | ROUTE,, | ROUTE,,_HEALTHCHECKS | ROUTE,,_HEALTHCHECKS_PUBLISHING | ROUTE,,_RESOLVER | S, | WORKSPACES_GATEWAYS. Parquet data type: STRING"},
    {"instruction": "pkt-dst-aws-service", "response": "The name of the subset of IP address ranges for the pkt-dstaddr field, if the destination IP address is for an AWS service. For a list of possible values, see the pkt-src-aws-service field. Parquet data type: STRING"},
    {"instruction": "flow-direction", "response": "The direction of the flow with respect to the interface where traffic is captured. The possible values are: ingress | egress. Parquet data type: STRING"},
    {"instruction": "traffic-path", "response": "The path that egress traffic takes to the destination. To determine whether the traffic is egress traffic, check the flow-direction field. The possible values are as follows. If none of the values apply, the field is set to -. 1 — Through another resource in the same VPC, including resources that create a network interface in the VPC 2 — Through an internet gateway or a gateway VPC endpoint 3 — Through a virtual private gateway 4 — Through an intra-region VPC peering connection 5 — Through an inter-region VPC peering connection 6 — Through a local gateway 7 — Through a gateway VPC endpoint (Nitro-based instances only) 8 — Through an internet gateway (Nitro-based instances only) Parquet data type: INT"},
    {"instruction": "ecs-cluster-arn", "response": "AWS Resource Name (ARN) of the ECS cluster if the traffic is from a running ECS task. To include this field in your subscription, you need permission to call ecs:ListClusters. Parquet data type: STRING"},
    {"instruction": "ecs-cluster-name", "response": "Name of the ECS cluster if the traffic is from a running ECS task. To include this field in your subscription, you need permission to call ecs:ListClusters. Parquet data type: STRING"},
    {"instruction": "ecs-container-instance-arn", "response": "ARN of the ECS container instance if the traffic is from a running ECS task on an EC, instance. If the capacity provider is AWS Fargate, this field will be '-'. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListContainerInstances. Parquet data type: STRING"},
    {"instruction": "ecs-container-instance-id", "response": "ID of the ECS container instance if the traffic is from a running ECS task on an EC, instance. If the capacity provider is AWS Fargate, this field will be '-'. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListContainerInstances. Parquet data type: STRING"},
    {"instruction": "ecs-container-id", "response": "Docker runtime ID of the container if the traffic is from a running ECS task. If there are one or more containers in the ECS task, this will be the docker runtime ID of the first container. To include this field in your subscription, you need permission to call ecs:ListClusters. Parquet data type: STRING"},
    {"instruction": "ecs-second-container-id", "response": "Docker runtime ID of the container if the traffic is from a running ECS task. If there are more than one containers in the ECS task, this will be the Docker runtime ID of the second container. To include this field in your subscription, you need permission to call ecs:ListClusters. Parquet data type: STRING"},
    {"instruction": "ecs-service-name", "response": "Name of the ECS service if the traffic is from a running ECS task and the ECS task is started by an ECS service. If the ECS task is not started by an ECS service, this field will be '-'. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListServices. Parquet data type: STRING"},
    {"instruction": "ecs-task-definition-arn", "response": "ARN of the ECS task definition if the traffic is from a running ECS task. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListTaskDefinitions Parquet data type: STRING"},
    {"instruction": "ecs-task-arn", "response": "ARN of the ECS task if the traffic is from a running ECS task. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListTasks. Parquet data type: STRING"},
    {"instruction": "ecs-task-id", "response": "ID of the ECS task if the traffic is from a running ECS task. To include this field in your subscription, you need permission to call ecs:ListClusters and ecs:ListTasks. Parquet data type: STRING"},
    {"instruction": "reject-reason", "response": "Reason why traffic was rejected. Possible values: BPA. Returns a '-' for any other reject reason. For more information about VPC Block Public Access (BPA), see Block public access to VPCs and subnets. Parquet data type: STRING"},
    {"instruction": "2 123456789010 eni-1235b8ca123456789 172.31.16.139 172.31.16.21 20641 22 6 20 4249 1418530010 1418530070 ACCEPT OK", "response": "Accepted and rejected trafficthis is example of default flow log records.In this example, SSH traffic (destination port 22, TCP protocol) from IP address 172.31.16.139 to network interface with private IP address is 172.31.16.21 and ID eni-1235b8ca123456789 in account 123456789010 was allowed."},
    {"instruction": "2 123456789010 eni-1235b8ca123456789 172.31.9.69 172.31.9.12 49761 3389 6 20 4249 1418530010 1418530070 REJECT OK", "response": "In this example, RDP traffic (destination port 3389, TCP protocol) to network interface eni-1235b8ca123456789 in account 123456789010 was rejected."},
    {"instruction": "2 123456789010 eni-1235b8ca123456789 - - - - - - - 1431280876 1431280934 - NODATA", "response": "No data and skipped recordsthis is example of default flow log records.In this example, no data was recorded during the aggregation interval."},
    {"instruction": "2 123456789010 eni-11111111aaaaaaaaa - - - - - - - 1431280876 1431280934 - SKIPDATA", "response": "VPC Flow Logs skips records when it can't capture flow log data during an aggregation interval because it exceeds internal capacity. A single skipped record can represent multiple flows that were not captured for the network interface during the aggregation interval."},
    {"instruction": "2 123456789010 eni-1235b8ca123456789 203.0.113.12 172.31.16.139 0 0 1 4 336 1432917027 1432917142 ACCEPT OK", "response": "Some flow log records may be skipped during the aggregation interval (see log-status in Available fields). This may be caused by an internal AWS capacity constraint or internal error. If you are using AWS Cost Explorer to view VPC flow log charges and some flow logs are skipped during the flow log aggregation interval, the number of flow logs reported in AWS Cost Explorer will be higher than the number of flow logs published by Amazon VPC.Security group and network ACL rulesIf you're using flow logs to diagnose overly restrictive or permissive security group rules or network ACL rules, be aware of the statefulness of these resources. Security groups are stateful — this means that responses to allowed traffic are also allowed, even if the rules in your security group do not permit it. Conversely, network ACLs are stateless, therefore responses to allowed traffic are subject to network ACL rules.For example, you use the ping command from your home computer (IP address is 203.0.113.12) to your instance (the network interface's private IP address is 172.31.16.139). Your security group's inbound rules allow ICMP traffic but the outbound rules do not allow ICMP traffic. Because security groups are stateful, the response ping from your instance is allowed. Your network ACL permits inbound ICMP traffic but does not permit outbound ICMP traffic. Because network ACLs are stateless, the response ping is dropped and does not reach your home computer. In a default flow log, this is displayed as two flow log records:An ACCEPT record for the originating ping that was allowed by both the network ACL and the security group, and therefore was allowed to reach your instance."},
    {"instruction": "2 123456789010 eni-1235b8ca123456789 172.31.16.139 203.0.113.12 0 0 1 4 336 1432917094 1432917142 REJECT OK", "response": "A REJECT record for the response ping that the network ACL denied.If your network ACL permits outbound ICMP traffic, the flow log displays two ACCEPT records (one for the originating ping and one for the response ping). If your security group denies inbound ICMP traffic, the flow log displays a single REJECT record, because the traffic was not permitted to reach your instance."},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 52.213.180.42 10.0.0.62 43416 5001 52.213.180.42 10.0.0.62 6 568 8 1566848875 1566848933 ACCEPT 2 OK", "response": "IPv6 trafficthis is an example of a default flow log record. In the example, SSH traffic (port 22) from IPv6 address 2001:db8:1234:a100:8d6e:3477:df66:f105 to network interface eni-1235b8ca123456789 in account 123456789010 was allowed.2 123456789010 eni-1235b8ca123456789 2001:db8:1234:a100:8d6e:3477:df66:f105 2001:db8:1234:a102:3304:8879:34cf:4071 34892 22 6 54 8855 1477913708 1477913820 ACCEPT OKTCP flag sequenceversion vpc-id subnet-id instance-id interface-id account-id type srcaddr dstaddr srcport dstport pkt-srcaddr pkt-dstaddr protocol bytes packets start end action tcp-flags log-statusThe tcp-flags field in the examples in this section are represented by the second-to-last value in the flow log. TCP flags can help you identify the direction of the traffic, for example, which server initiated the connection.For more information about the tcp-flags option and an explanation of each of the TCP flags, see Available fields.In this records (starting at 7:47:55 PM and ending at 7:48:53 PM), two connections were started by a client to a server running on port 5001. Two SYN flags (2) were received by server from the client from different source ports on the client (43416 and 43418). "},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 10.0.0.62 52.213.180.42 5001 43416 10.0.0.62 52.213.180.42 6 376 7 1566848875 1566848933 ACCEPT 18 OK", "response": "Two SYN flags (2) were received by server from the client from different source ports on the client (43416 and 43418). For each SYN, a SYN-ACK was sent from the server to the client (18) on the corresponding port."},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 52.213.180.42 10.0.0.62 43418 5001 52.213.180.42 10.0.0.62 6 100701 70 1566848875 1566848933 ACCEPT 2 OK", "response": "Two SYN flags (2) were received by server from the client from different source ports on the client (43416 and 43418). For each SYN, a SYN-ACK was sent from the server to the client (18) on the corresponding port."},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 10.0.0.62 52.213.180.42 5001 43418 10.0.0.62 52.213.180.42 6 632 12 1566848875 1566848933 ACCEPT 18 OK", "response": "Two SYN flags (2) were received by server from the client from different source ports on the client (43416 and 43418). For each SYN, a SYN-ACK was sent from the server to the client (18) on the corresponding port"},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 10.0.0.62 52.213.180.42 5001 43418 10.0.0.62 52.213.180.42 6 63388 1219 1566848933 1566849113 ACCEPT 1 OK", "response": "In the second aggregation interval, one of the connections that was established during the previous flow is now closed. The server sent a FIN flag (1) to the client for the connection on port 43418. The client responded with a FIN to the server on port 43418."},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 52.213.180.42 10.0.0.62 43418 5001 52.213.180.42 10.0.0.62 6 23294588 15774 1566848933 1566849113 ACCEPT 1 OK", "response": "In the second aggregation interval, one of the connections that was established during the previous flow is now closed. The server sent a FIN flag (1) to the client for the connection on port 43418. The client responded with a FIN to the server on port 43418."},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 52.213.180.42 10.0.0.62 43638 5001 52.213.180.42 10.0.0.62 6 1260 17 1566933133 1566933193 ACCEPT 3 OK", "response": "For short connections (for example, a few seconds) that are opened and closed within a single aggregation interval, the flags might be set on the same line in the flow log record for traffic flow in the same direction. In this example, the connection is established and finished within the same aggregation interval. In the first line, the TCP flag value is 3, which indicates that there was a SYN and a FIN message sent from the client to the server. "},
    {"instruction": "3 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-01234567890123456 eni-1235b8ca123456789 123456789010 IPv4 10.0.0.62 52.213.180.42 5001 43638  10.0.0.62 52.213.180.42 6 967 14 1566933133 1566933193 ACCEPT 19 OK", "response": "In the second line, the TCP flag value is 19, which indicates that there was SYN-ACK and a FIN message sent from the server to the client."},
    {"instruction": "- eni-1235b8ca123456789 10.0.1.5 10.0.0.220 10.0.1.5 203.0.113.5", "response": "Traffic through a NAT gatewayIn this example, an instance in a private subnet accesses the internet through a NAT gateway that's in a public subnet.Accessing the internet through a NAT gatewaythis custom flow log for the NAT gateway network interface captures this fields in this order.instance-id interface-id srcaddr dstaddr pkt-srcaddr pkt-dstaddrThe flow log shows the flow of traffic from the instance IP address (10.0.1.5) through the NAT gateway network interface to a host on the internet (203.0.113.5). The NAT gateway network interface is a requester-managed network interface, therefore the flow log record displays a '-' symbol for the instance-id field. this line shows traffic from the source instance to the NAT gateway network interface. The values for the dstaddr and pkt-dstaddr fields are different. The dstaddr field displays the private IP address of the NAT gateway network interface, and the pkt-dstaddr field displays the final destination IP address of the host on the internet."},
    {"instruction": "- eni-1235b8ca123456789 10.0.0.220 203.0.113.5 10.0.0.220 203.0.113.5", "response": "The next two lines show the traffic from the NAT gateway network interface to the target host on the internet"},
    {"instruction": "- eni-1235b8ca123456789 203.0.113.5 10.0.0.220 203.0.113.5 10.0.0.220", "response": "and the response traffic from the host to the NAT gateway network interface"},
    {"instruction": "- eni-1235b8ca123456789 10.0.0.220 10.0.1.5 203.0.113.5 10.0.1.5", "response": "this line shows the response traffic from the NAT gateway network interface to the source instance. The values for the srcaddr and pkt-srcaddr fields are different. The srcaddr field displays the private IP address of the NAT gateway network interface, and the pkt-srcaddr field displays the IP address of the host on the internet."},
    {"instruction": "i-01234567890123456 eni-1111aaaa2222bbbb3 10.0.1.5 203.0.113.5 10.0.1.5 203.0.113.5", "response": "You create another custom flow log using the same set of fields as above. You create the flow log for the network interface for the instance in the private subnet. In this case, the instance-id field returns the ID of the instance that's associated with the network interface, and there is no difference between the dstaddr and pkt-dstaddr fields and the srcaddr and pkt-srcaddr fields. Unlike the network interface for the NAT gateway, this network interface is not an intermediate network interface for traffic.Traffic from the source instance to host on the internet"},
    {"instruction": "i-01234567890123456 eni-1111aaaa2222bbbb3 203.0.113.5 10.0.1.5 203.0.113.5 10.0.1.5", "response": "Response traffic from host on the internet to the source instance"},
    {"instruction": "3 eni-33333333333333333 123456789010 vpc-abcdefab012345678 subnet-22222222bbbbbbbbb i-01234567890123456 10.40.2.236 10.20.33.164 80 39812 6 19 IPv4 10.40.2.236 10.20.33.164 ACCEPT OK", "response": "Traffic through a transit gatewayIn this example, a client in VPC A connects to a web server in VPC B through a transit gateway. The client and server are in different Availability Zones. Traffic arrives at the server in VPC B using one elastic network interface ID (in this example, let's say the ID is eni-11111111111111111) and leaves VPC B using another (for example eni-22222222222222222).Traffic through a transit gatewayYou create a custom flow log for VPC B with this format.version interface-id account-id vpc-id subnet-id instance-id srcaddr dstaddr srcport dstport protocol tcp-flags type pkt-srcaddr pkt-dstaddr action log-statusthis lines from the flow log records demonstrate the flow of traffic on the network interface for the web server. The first line is the request traffic from the client, and the last line is the response traffic from the web server."},
    {"instruction": "3 eni-11111111111111111 123456789010 vpc-abcdefab012345678 subnet-11111111aaaaaaaaa - 10.40.1.175 10.40.2.236 39812 80 6 3 IPv4 10.20.33.164 10.40.2.236 ACCEPT OK", "response": "this line is the request traffic on eni-11111111111111111, a requester-managed network interface for the transit gateway in subnet subnet-11111111aaaaaaaaa. The flow log record therefore displays a '-' symbol for the instance-id field. The srcaddr field displays the private IP address of the transit gateway network interface, and the pkt-srcaddr field displays the source IP address of the client in VPC A."},
    {"instruction": "3 eni-22222222222222222 123456789010 vpc-abcdefab012345678 subnet-22222222bbbbbbbbb - 10.40.2.236 10.40.2.31 80 39812 6 19 IPv4 10.40.2.236 10.20.33.164 ACCEPT OK", "response": "this line is the response traffic on eni-22222222222222222, a requester-managed network interface for the transit gateway in subnet subnet-22222222bbbbbbbbb. The dstaddr field displays the private IP address of the transit gateway network interface, and the pkt-dstaddr field displays the IP address of the client in VPC A."},
    {"instruction": "5 52.95.128.179 10.0.0.71 80 34210 6 1616729292 1616729349 IPv4 14 15044 123456789012 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-0c50d5961bcb2d47b eni-1235b8ca123456789 ap-southeast-2 apse2-az3 - - ACCEPT 19 52.95.128.179 10.0.0.71 S3 - - ingress OK", "response": "Service name, traffic path, and flow directionthis is an example of the fields for a custom flow log record.version srcaddr dstaddr srcport dstport protocol start end type packets bytes account-id vpc-id subnet-id instance-id interface-id region az-id sublocation-type sublocation-id action tcp-flags pkt-srcaddr pkt-dstaddr pkt-src-aws-service pkt-dst-aws-service traffic-path flow-direction log-statusIn this example, the version is 5 because the records include version 5 fields. An EC2 instance calls the Amazon S3 service. Flow logs are captured on the network interface for the instance. The first record has a flow direction of ingress"},
    {"instruction": "5 10.0.0.71 52.95.128.179 34210 80 6 1616729292 1616729349 IPv4 7 471 123456789012 vpc-abcdefab012345678 subnet-aaaaaaaa012345678 i-0c50d5961bcb2d47b eni-1235b8ca123456789 ap-southeast-2 apse2-az3 - - ACCEPT 3 10.0.0.71 52.95.128.179 - S3 8 egress OK", "response": "this record has a flow direction of egress. For the egress record, traffic-path is 8, indicating that the traffic goes through an internet gateway. The traffic-path field is not supported for ingress traffic. When pkt-srcaddr or pkt-dstaddr is a public IP address, the service name is shown"},
    {"instruction": "2, 123456789012, eni-0abcdef1234567890, 10.0.0.10, 172.31.22.145, 54321, 80, 6, 10, 1200, 1678886400, 1678886460, ACCEPT, OK", "response":"version, account-id, interface-id, srcaddr, dstaddr, srcport, dstport, protocol, packets, bytes, start, end, action. log-status"},
]

# model_dir = "Qwen/Qwen2-7B-Instruct"
# model_dir = "tiiuae/Falcon3-7B-Instruct"
model_dir = "tiiuae/Falcon3-10B-Instruct"
tokenizer = AutoTokenizer.from_pretrained(model_dir)
model = AutoModelForCausalLM.from_pretrained(model_dir)

lora_config = LoraConfig(r=8, lora_alpha=16, target_modules=["q_proj", "v_proj"])
model = get_peft_model(model, lora_config)

# Set the device to CUDA if available, otherwise CPU
# device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# model.to(device)

train_dataset = Dataset.from_dict({"instruction": [d["instruction"] for d in data], "response": [d["response"] for d in data]})

# print(dataset[0])
# Convert to Hugging Face Dataset

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token
    
# Tokenize the dataset
def tokenize_function(examples):
    return tokenizer(examples["instruction"], text_target=examples["response"], truncation=True, padding='max_length', max_length=512)

tokenized_train_dataset = train_dataset.map(tokenize_function, batched=True)

# print(tokenized_train_dataset[0])

training_args = TrainingArguments(
    output_dir="./results", 
    num_train_epochs=3,
    save_strategy="steps",   # Save checkpoint every 'save_steps'
    save_steps=10,        
)

trainer = SFTTrainer(
    model=model,
    processing_class=tokenizer,
    train_dataset=tokenized_train_dataset,
    args=training_args,
    # formatting_func=lambda x: f"### Instruction:\n{x['instruction']}\n### Output:\n{x['response']}",
)

trainer.train()
model.save_pretrained("./fine_tuned_model_v1")
tokenizer.save_pretrained("./fine_tuned_model_v1")
